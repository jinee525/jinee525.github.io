{"ast":null,"code":"import HJLogo from './img/hj_logo.png';\nimport PreBlog1 from './img/pre_blog_1.png';\nimport PreBlog2 from './img/pre_blog_2.png';\nimport PreCareer1 from './img/pre_career_1.png';\nimport PreCareer2 from './img/pre_career_2.png';\nimport PrePackage1 from './img/pre_package_1.png';\nimport PrePackage2 from './img/pre_package_2.png';\nconst skills = ['React', 'JavaScript ', 'CSS3', 'Responsive Web', 'GraphQL', 'Django', 'Python', 'PostgreSQL', 'AWS', 'ReactAdmin', 'React-Native', 'next.js', 'TypeScript'];\nconst jobs = [{\n  id: 1,\n  logo: HJLogo,\n  company: '플래너리',\n  url: 'https://heyjoyce.com',\n  date: '2020.07.07 ~ 2021.01.07 (인턴) / 2021.01.08 ~ 현재 (정규)',\n  summary: '스타트업의 5인으로 이루어진 개발팀에서 풀스택 웹개발자로 근무하고 있습니다. 적은 인원으로 이루어진 개발팀이기에 크고 작은 프로젝트들을 주도적으로 진행하고있습니다. AWS를 이용하여 효율적으로 BE개발을 하고 React로 FE를 구현하며 빠른 delivery를 하고있습니다.',\n  projects: [{\n    title: '배너 자동화',\n    content: '웹사이트 메인 페이지의 상단/하단 배너를 관리하는 adminAPI/clientAPI를 구현했습니다.\\n[adminAPI] 관리자가 노출 조건(기간, 대상, 우선순위)을 설정하여 배너를 생성할 수 있음\\n[clinetAPI] 웹사이트에서 조건에 맞는 배너를 가져와 화면에 표시함',\n    boundary: ['BE'],\n    tech: ['Django', 'Python', 'React', 'JavaScript', 'Node.js', 'CSS'],\n    url: 'https://heyjoyce.com'\n  }, {\n    title: '쿠폰 패키지 (신규 서비스)',\n    content: '쿠폰 묶음 상품을 구매할 수 있는 화면과, 쿠폰 구매 후 생성되는 데이터를 구독하여 쿠폰을 자동 발급하는 시스템을 구현했습니다.\\n1. order_event가 생기면 AWS-EventBridge에서 구독중인 규칙에 의해 couponCreat(AWS-Lambda 함수)가 호출됨\\n2. 호출 된 함수에서 쿠폰 발급 후 coupon_created_event를 생성함\\n3. toast API를 이용하여 유저에게 알림을 보냄',\n    boundary: ['FE', 'BE'],\n    tech: ['AWS-Lambda', 'AWS-EventBridge', 'AWS-DynamoDB', 'SAAS', 'React', 'JavaScript', 'Node.js', 'CSS'],\n    url: 'https://heyjoyce.com/package',\n    preview: [PrePackage1, PrePackage2]\n  }, {\n    title: '콘텐츠 검색 기능 (신규 서비스)',\n    content: '커리어 상담 페이지에 카테고리로 필터링하는 기능과 키워드로 콘텐츠를 검색하는 기능을 구현했습니다.\\n1. AWS-DynamoDB의 data를 AWS-Elasticsearch에 PUT하고 mapping&indexing\\n2. GraphQL로 search 스키마를 정의하고 resolver에 ES 쿼리를 작성함\\n3. client에서 검색 GraphQL 쿼리를 호출하여 원하는 결과 리스트를 받음',\n    boundary: ['FE', 'BE'],\n    tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'React', 'JavaScript', 'Node.js', 'CSS'],\n    url: 'https://heyjoyce.com/feed/list',\n    preview: [PreCareer1, PreCareer2]\n  }, {\n    title: '디지털 콘텐츠 자동 등록',\n    content: 'teachable(SaaS)를 통해 제공되는 디지털 콘텐츠 자동 등록 프로세스를 구현했습니다.\\n1. 콘텐츠 구매 후 생성되는 order_event를 AWS-EventBridge에서 구독하여 registerTeachable(AWS-Lambda 함수)를 호출함\\n2. teachable API를 이용하여 유저 계정 생성 및 코스 등록함',\n    boundary: ['FE', 'BE'],\n    tech: ['AWS-Lambda', 'AWS-DynamoDB', 'AWS-EventBridge', 'SaaS', 'React', 'JavaScript', 'Node.js', 'CSS'],\n    url: ''\n  }, {\n    title: '통합 검색 시스템 (신규 서비스)',\n    content: '서비스하는 모든 콘텐츠에대한 통합 검색 기능 MVP를 AWS-Elasticsearch를 이용하여 구현했습니다.\\n1. 다양한 타입의 콘텐츠를 추가할 수 있게 union type을 이용하여 확장성 있는 GraphQL schema를 정의함\\n2. 30분마다 update된 postgreSQL의 data를 AWS-EventBridge로 구독하여 AWS-Elasticsearch에 싱크함\\n3. GraphQL로 search 스키마를 정의하고 resolver에 ES 쿼리를 작성하여 검색 시스템을 구현함',\n    boundary: ['BE'],\n    tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'AWS-Lambda', 'AWS-EventBridge', 'JavaScript'],\n    url: 'https://heyjoyce.com'\n  }, {\n    title: 'table 확장 설계 (feat. microservice)',\n    content: 'microservice 중 하나인 feed service를 확장 설계하여 여러 타입의 콘텐츠(ex. 블로그, 리뷰)를 제공할 수 있도록 설계했습니다.\\n1. 모든 타입에서 사용하는 공통 필드와 개별 필들를 정의하고 CRUD를 재 정의함\\n2. 각 요청에 맞게 GraphQL input을 수정하고, resolver에 ES 쿼리를 작성하여 조건에 맞는 콘텐츠를 제공할 수 있도록 구현함',\n    boundary: ['BE'],\n    tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'JavaScript'],\n    url: ''\n  }, {\n    title: '블로그 (신규 서비스)',\n    content: \"브랜드 스토리, 가이드, 인터뷰를 담고 있는 블로그 페이지를 구현했습니다.\\n1. AWS-Elasticsearch 매핑시 블로그 타입같이 고정값을 가지는 필드는 'keyword' 타입으로 정의함.\\n2.'keyword'로 정의된 필드는 'filter-term'으로 쿼리하여 검색 효율을 높임\\n3. GraphQL 스키마를 블로그 타입별로 가져올 수 있게 수정함\",\n    boundary: ['FE'],\n    tech: ['AWS-Elasticsearch', 'GraphQL', 'React', 'JavaScript', 'Node.js', 'CSS'],\n    url: 'https://heyjoyce.com/blog/list',\n    preview: [PreBlog1, PreBlog2]\n  }, {\n    title: '휴면계정 30일전 안내 및 당일 전환',\n    content: '마지막 로그인 날짜로 부터 1년이 지난 유저를 대상으로 30일전 안내와 당일 휴면 계정 전환 프로세스를 구현했습니다.\\n1. Sequelize(ORM for Postgres)를 이용하여 30일 전 안내 대상 유저와 당일 전환되는 유저 리스트를 생성함\\n2. 리스트 별로 쿠폰 대량 자동 지급 또는 SaaS API를 이용하여 알림톡과 메일을 보내는 람다함수를 작성함\\n3. AWS-EventBridge로 매일 자정에 휴면 계정 처리 람다함수를 호출함',\n    boundary: ['BE'],\n    tech: ['AWS-EventBridge', 'AWS-Lambda', 'JavaScript', 'SaaS'],\n    url: ''\n  }, {\n    title: '아이디/비밀번호 찾기 개선 (VoC 이슈)',\n    content: '등록된 계정을 찾고, 비밀번호를 재설정하는 과정을 단계별로 쪼개 API를 구현하여 유저 편의를 높이는 경험으로 개선했습니다.\\n1. 기존 하나의 API로 작동하던 것을 confirm_user(해당 유저가 가입된 계정인지 확인하는 API)와 이후 작업들로 분리함\\n2. 계정확인 후 이뤄지는 이후 작업에 보안 절차를 추가함',\n    boundary: ['FE', 'BE'],\n    tech: ['Django', 'React', 'JavaScript', 'Node.js', 'CSS', 'SaaS'],\n    url: ''\n  }]\n}];\nexport { skills, jobs };","map":{"version":3,"sources":["/Users/yujin/Documents/GitHub/yj-worklog/src/data/infos.js"],"names":["HJLogo","PreBlog1","PreBlog2","PreCareer1","PreCareer2","PrePackage1","PrePackage2","skills","jobs","id","logo","company","url","date","summary","projects","title","content","boundary","tech","preview"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,MAAMC,MAAM,GAAG,CACb,OADa,EAEb,aAFa,EAGb,MAHa,EAIb,gBAJa,EAKb,SALa,EAMb,QANa,EAOb,QAPa,EAQb,YARa,EASb,KATa,EAUb,YAVa,EAWb,cAXa,EAYb,SAZa,EAab,YAba,CAAf;AAgBA,MAAMC,IAAI,GAAG,CACX;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAEV,MAFR;AAGEW,EAAAA,OAAO,EAAE,MAHX;AAIEC,EAAAA,GAAG,EAAE,sBAJP;AAKEC,EAAAA,IAAI,EAAE,qDALR;AAMEC,EAAAA,OAAO,EACL,2JAPJ;AAQEC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,QADT;AAEEC,IAAAA,OAAO,EACL,4JAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,YAA9B,EAA4C,SAA5C,EAAuD,KAAvD,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GADQ,EASR;AACEI,IAAAA,KAAK,EAAE,iBADT;AAEEC,IAAAA,OAAO,EACL,4OAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,IAAP,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,YAAD,EAAe,iBAAf,EAAkC,cAAlC,EAAkD,MAAlD,EAA0D,OAA1D,EAAmE,YAAnE,EAAiF,SAAjF,EAA4F,KAA5F,CALR;AAMEP,IAAAA,GAAG,EAAE,8BANP;AAOEQ,IAAAA,OAAO,EAAE,CAACf,WAAD,EAAcC,WAAd;AAPX,GATQ,EAkBR;AACEU,IAAAA,KAAK,EAAE,oBADT;AAEEC,IAAAA,OAAO,EACL,6NAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,IAAP,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB,cAAtB,EAAsC,SAAtC,EAAiD,OAAjD,EAA0D,YAA1D,EAAwE,SAAxE,EAAmF,KAAnF,CALR;AAMEP,IAAAA,GAAG,EAAE,gCANP;AAOEQ,IAAAA,OAAO,EAAE,CAACjB,UAAD,EAAaC,UAAb;AAPX,GAlBQ,EA2BR;AACEY,IAAAA,KAAK,EAAE,eADT;AAEEC,IAAAA,OAAO,EACL,4LAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,IAAP,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,YAAD,EAAe,cAAf,EAA+B,iBAA/B,EAAkD,MAAlD,EAA0D,OAA1D,EAAmE,YAAnE,EAAiF,SAAjF,EAA4F,KAA5F,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GA3BQ,EAmCR;AACEI,IAAAA,KAAK,EAAE,oBADT;AAEEC,IAAAA,OAAO,EACL,sRAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB,cAAtB,EAAsC,SAAtC,EAAiD,YAAjD,EAA+D,iBAA/D,EAAkF,YAAlF,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GAnCQ,EA2CR;AACEI,IAAAA,KAAK,EAAE,kCADT;AAEEC,IAAAA,OAAO,EACL,uNAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB,cAAtB,EAAsC,SAAtC,EAAiD,YAAjD,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GA3CQ,EAmDR;AACEI,IAAAA,KAAK,EAAE,cADT;AAEEC,IAAAA,OAAO,EACL,2MAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB,SAAtB,EAAiC,OAAjC,EAA0C,YAA1C,EAAwD,SAAxD,EAAmE,KAAnE,CALR;AAMEP,IAAAA,GAAG,EAAE,gCANP;AAOEQ,IAAAA,OAAO,EAAE,CAACnB,QAAD,EAAWC,QAAX;AAPX,GAnDQ,EA4DR;AACEc,IAAAA,KAAK,EAAE,sBADT;AAEEC,IAAAA,OAAO,EACL,4PAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,iBAAD,EAAoB,YAApB,EAAkC,YAAlC,EAAgD,MAAhD,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GA5DQ,EAoER;AACEI,IAAAA,KAAK,EAAE,yBADT;AAEEC,IAAAA,OAAO,EACL,qLAHJ;AAIEC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,IAAP,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,YAApB,EAAkC,SAAlC,EAA6C,KAA7C,EAAoD,MAApD,CALR;AAMEP,IAAAA,GAAG,EAAE;AANP,GApEQ;AARZ,CADW,CAAb;AAyFA,SAASL,MAAT,EAAiBC,IAAjB","sourcesContent":["import HJLogo from './img/hj_logo.png';\nimport PreBlog1 from './img/pre_blog_1.png';\nimport PreBlog2 from './img/pre_blog_2.png';\nimport PreCareer1 from './img/pre_career_1.png';\nimport PreCareer2 from './img/pre_career_2.png';\nimport PrePackage1 from './img/pre_package_1.png';\nimport PrePackage2 from './img/pre_package_2.png';\n\nconst skills = [\n  'React',\n  'JavaScript ',\n  'CSS3',\n  'Responsive Web',\n  'GraphQL',\n  'Django',\n  'Python',\n  'PostgreSQL',\n  'AWS',\n  'ReactAdmin',\n  'React-Native',\n  'next.js',\n  'TypeScript'\n];\n\nconst jobs = [\n  {\n    id: 1,\n    logo: HJLogo,\n    company: '플래너리',\n    url: 'https://heyjoyce.com',\n    date: '2020.07.07 ~ 2021.01.07 (인턴) / 2021.01.08 ~ 현재 (정규)',\n    summary:\n      '스타트업의 5인으로 이루어진 개발팀에서 풀스택 웹개발자로 근무하고 있습니다. 적은 인원으로 이루어진 개발팀이기에 크고 작은 프로젝트들을 주도적으로 진행하고있습니다. AWS를 이용하여 효율적으로 BE개발을 하고 React로 FE를 구현하며 빠른 delivery를 하고있습니다.',\n    projects: [\n      {\n        title: '배너 자동화',\n        content:\n          '웹사이트 메인 페이지의 상단/하단 배너를 관리하는 adminAPI/clientAPI를 구현했습니다.\\n[adminAPI] 관리자가 노출 조건(기간, 대상, 우선순위)을 설정하여 배너를 생성할 수 있음\\n[clinetAPI] 웹사이트에서 조건에 맞는 배너를 가져와 화면에 표시함',\n        boundary: ['BE'],\n        tech: ['Django', 'Python', 'React', 'JavaScript', 'Node.js', 'CSS'],\n        url: 'https://heyjoyce.com',\n      },\n      {\n        title: '쿠폰 패키지 (신규 서비스)',\n        content:\n          '쿠폰 묶음 상품을 구매할 수 있는 화면과, 쿠폰 구매 후 생성되는 데이터를 구독하여 쿠폰을 자동 발급하는 시스템을 구현했습니다.\\n1. order_event가 생기면 AWS-EventBridge에서 구독중인 규칙에 의해 couponCreat(AWS-Lambda 함수)가 호출됨\\n2. 호출 된 함수에서 쿠폰 발급 후 coupon_created_event를 생성함\\n3. toast API를 이용하여 유저에게 알림을 보냄',\n        boundary: ['FE', 'BE'],\n        tech: ['AWS-Lambda', 'AWS-EventBridge', 'AWS-DynamoDB', 'SAAS', 'React', 'JavaScript', 'Node.js', 'CSS'],\n        url: 'https://heyjoyce.com/package',\n        preview: [PrePackage1, PrePackage2],\n      },\n      {\n        title: '콘텐츠 검색 기능 (신규 서비스)',\n        content:\n          '커리어 상담 페이지에 카테고리로 필터링하는 기능과 키워드로 콘텐츠를 검색하는 기능을 구현했습니다.\\n1. AWS-DynamoDB의 data를 AWS-Elasticsearch에 PUT하고 mapping&indexing\\n2. GraphQL로 search 스키마를 정의하고 resolver에 ES 쿼리를 작성함\\n3. client에서 검색 GraphQL 쿼리를 호출하여 원하는 결과 리스트를 받음',\n        boundary: ['FE', 'BE'],\n        tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'React', 'JavaScript', 'Node.js', 'CSS'],\n        url: 'https://heyjoyce.com/feed/list',\n        preview: [PreCareer1, PreCareer2],\n      },\n      {\n        title: '디지털 콘텐츠 자동 등록',\n        content:\n          'teachable(SaaS)를 통해 제공되는 디지털 콘텐츠 자동 등록 프로세스를 구현했습니다.\\n1. 콘텐츠 구매 후 생성되는 order_event를 AWS-EventBridge에서 구독하여 registerTeachable(AWS-Lambda 함수)를 호출함\\n2. teachable API를 이용하여 유저 계정 생성 및 코스 등록함',\n        boundary: ['FE', 'BE'],\n        tech: ['AWS-Lambda', 'AWS-DynamoDB', 'AWS-EventBridge', 'SaaS', 'React', 'JavaScript', 'Node.js', 'CSS'],\n        url: '',\n      },\n      {\n        title: '통합 검색 시스템 (신규 서비스)',\n        content:\n          '서비스하는 모든 콘텐츠에대한 통합 검색 기능 MVP를 AWS-Elasticsearch를 이용하여 구현했습니다.\\n1. 다양한 타입의 콘텐츠를 추가할 수 있게 union type을 이용하여 확장성 있는 GraphQL schema를 정의함\\n2. 30분마다 update된 postgreSQL의 data를 AWS-EventBridge로 구독하여 AWS-Elasticsearch에 싱크함\\n3. GraphQL로 search 스키마를 정의하고 resolver에 ES 쿼리를 작성하여 검색 시스템을 구현함',\n        boundary: ['BE'],\n        tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'AWS-Lambda', 'AWS-EventBridge', 'JavaScript'],\n        url: 'https://heyjoyce.com',\n      },\n      {\n        title: 'table 확장 설계 (feat. microservice)',\n        content:\n          'microservice 중 하나인 feed service를 확장 설계하여 여러 타입의 콘텐츠(ex. 블로그, 리뷰)를 제공할 수 있도록 설계했습니다.\\n1. 모든 타입에서 사용하는 공통 필드와 개별 필들를 정의하고 CRUD를 재 정의함\\n2. 각 요청에 맞게 GraphQL input을 수정하고, resolver에 ES 쿼리를 작성하여 조건에 맞는 콘텐츠를 제공할 수 있도록 구현함',\n        boundary: ['BE'],\n        tech: ['AWS-Elasticsearch', 'AWS-DynamoDB', 'GraphQL', 'JavaScript'],\n        url: '',\n      },\n      {\n        title: '블로그 (신규 서비스)',\n        content:\n          \"브랜드 스토리, 가이드, 인터뷰를 담고 있는 블로그 페이지를 구현했습니다.\\n1. AWS-Elasticsearch 매핑시 블로그 타입같이 고정값을 가지는 필드는 'keyword' 타입으로 정의함.\\n2.'keyword'로 정의된 필드는 'filter-term'으로 쿼리하여 검색 효율을 높임\\n3. GraphQL 스키마를 블로그 타입별로 가져올 수 있게 수정함\",\n        boundary: ['FE'],\n        tech: ['AWS-Elasticsearch', 'GraphQL', 'React', 'JavaScript', 'Node.js', 'CSS'],\n        url: 'https://heyjoyce.com/blog/list',\n        preview: [PreBlog1, PreBlog2],\n      },\n      {\n        title: '휴면계정 30일전 안내 및 당일 전환',\n        content:\n          '마지막 로그인 날짜로 부터 1년이 지난 유저를 대상으로 30일전 안내와 당일 휴면 계정 전환 프로세스를 구현했습니다.\\n1. Sequelize(ORM for Postgres)를 이용하여 30일 전 안내 대상 유저와 당일 전환되는 유저 리스트를 생성함\\n2. 리스트 별로 쿠폰 대량 자동 지급 또는 SaaS API를 이용하여 알림톡과 메일을 보내는 람다함수를 작성함\\n3. AWS-EventBridge로 매일 자정에 휴면 계정 처리 람다함수를 호출함',\n        boundary: ['BE'],\n        tech: ['AWS-EventBridge', 'AWS-Lambda', 'JavaScript', 'SaaS'],\n        url: '',\n      },\n      {\n        title: '아이디/비밀번호 찾기 개선 (VoC 이슈)',\n        content:\n          '등록된 계정을 찾고, 비밀번호를 재설정하는 과정을 단계별로 쪼개 API를 구현하여 유저 편의를 높이는 경험으로 개선했습니다.\\n1. 기존 하나의 API로 작동하던 것을 confirm_user(해당 유저가 가입된 계정인지 확인하는 API)와 이후 작업들로 분리함\\n2. 계정확인 후 이뤄지는 이후 작업에 보안 절차를 추가함',\n        boundary: ['FE', 'BE'],\n        tech: ['Django', 'React', 'JavaScript', 'Node.js', 'CSS', 'SaaS'],\n        url: '',\n      },\n    ],\n  },\n];\n\nexport { skills, jobs };\n"]},"metadata":{},"sourceType":"module"}